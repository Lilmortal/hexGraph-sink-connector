package sink.task;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.kafka.connect.sink.SinkRecord;
import org.apache.kafka.connect.sink.SinkTask;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import sink.connector.HexGraphSinkConnector;

import java.io.*;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Map;
import java.util.Optional;

import static sink.config.HexGraphSinkConnectorConfig.DIRECTORY_SINK;

/*
 * This Java source file was auto generated by running 'gradle buildInit --type java-library'
 * by 'jack' at '8/01/18 3:30 PM' with Gradle 2.10
 *
 * @author jack, @date 8/01/18 3:30 PM
 */
public class HexGraphSinkTask extends SinkTask {
    public static final Logger LOGGER = LoggerFactory.getLogger(HexGraphSinkTask.class);

    private String directorySink;

    @Override
    public String version() {
        return new HexGraphSinkConnector().version();
    }

    @Override
    public void start(Map<String, String> props) {
        LOGGER.info("Hex graph sink task starting.");

        directorySink = props.get(DIRECTORY_SINK);
    }

    @Override
    public void put(Collection<SinkRecord> records) {
        try {
            for (SinkRecord sinkRecord : records) {
                HexGraphResult hexGraphResult = new ObjectMapper().readValue(sinkRecord.value().toString(), HexGraphResult.class);

                LocalDateTime creationDate = Optional.of(hexGraphResult.getCreationDate()).orElse(LocalDateTime.now());
                String imagePath = hexGraphResult.getImagePath();

                String fileName = directorySink + "/" + creationDate;
                File file = new File(fileName);
                if (!file.exists()) {
                    file.mkdir();
                }

                FileOutputStream fos = new FileOutputStream(fileName);
                DataOutputStream outStream = new DataOutputStream(new BufferedOutputStream(fos));
                outStream.writeUTF(imagePath);
                outStream.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void stop() {
        LOGGER.info("Hex graph sink task stopping.");
    }
}
